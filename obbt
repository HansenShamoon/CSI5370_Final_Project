#!/usr/bin/perl

use FindBin;

my $ports1;
BEGIN {
	$ports1 = $ENV{PORTSDIR} || '/usr/ports';
}
use lib ("$ports1/infrastructure/lib", "$FindBin::Bin/../lib");
use DPB::MiniCurses;
use OpenBSD::State;

package DPBReplay::State;
our @ISA = (qw(OpenBSD::State));

sub handle_options($state)
{
	$state->SUPER::handle_options('Ccs:e:t:', '[-c] [-s speedup] [-e regexp] [-t ts] file');
	if ($state->opt('c') || $state->opt('C')) {
		$state->{color} = 1;
	}
	if ($state->opt('e')) {
		my $e = $state->opt('e');
		$state->{regexp} = qr{$e};
	}
	if ($state->opt('t')) {
		$state->{ts} = $state->opt('t');
		if ($state->{ts} !~ m/^\d+$/) {
			require DPB::ISO8601;
			$state->{ts} = DPB::ISO8601->string2time($state->{ts}, 
			    $state);
		}
	}
}

package Term;
our @ISA = qw(DPB::MiniCurses);

sub new($class, $state)
{
	my $self = bless {state => $state}, $class;
	$self->create_terminal;
	return $self;
}

package main;
use Time::HiRes (qw(time sleep));

my $state = DPBReplay::State->new;
$state->handle_options;


my $file = shift;
my $speedup = $state->opt('s') // 10;
$speedup += 0.0;
my $term = Term->new($state);

open(my $fh, '<', $file);

my $start_ts;
my $start_time = time();
my $msg = '';
my $display = (defined $state->{regexp} || defined $state->{ts}) ? 0 : 1;
$exec proot chroot=/build \
extra=/usr/local/obbt/dpb-start.sh \
WRKOBJDIR=/tmp/pobj LOCKDIR=/tmp/locks \
PLIST_REPOSITORY=/data/plist \
DISTDIR=/data/distfiles \
PACKAGE_REPOSITORY=/data/packages chown_all=1
$exec dpb $file
$exec check-lib-depends $file
$exec pkg_check-manpages $file[1]
$exec pkg_check-problems $file
$exec pkg_check-version $file
$exec check-bindings $file
while(<$fh>) {
	if (m/^\@\@\@(\d+)$/) {
		chomp;
		my $ts = int($1);
		if (!$display) {
			if (defined $state->{regexp} && 
			    $msg =~ m/$state->{regexp}/) {
				$display = 1;
			} elsif (defined $state->{ts} &&
				$ts >= $state->{ts}) {
				$display = 1;
		    	}
		}
		if ($display) {
			$start_ts //= $ts;

			my $now = time();
			my $sleep = ($ts-$start_ts)/$speedup - 
			    ($now - $start_time);
			if ($sleep > 0) {
				sleep($sleep);
			}
			my $method = $term->{write};
			$term->$method($msg);
			$term->{msg} = $msg;
		}
		$msg = '';
	} else {
		$msg .= $_;
	}
}
close($fh);
